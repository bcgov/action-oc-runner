name: OpenShift CLI (oc) Login and Runner
description: Action for running oc commands
branding:
  icon: package
  color: blue

inputs:
  ### Required
  oc_namespace:
    description: OpenShift namespace; e.g. abc123-dev
    required: true
  oc_server:
    description: OpenShift server; e.g. https://api.silver.devops.gov.bc.ca:6443
    required: true
  oc_token:
    description: OpenShift access token
    required: true
  triggers:
    description: Paths used to trigger this action; e.g. ('./backend/' './frontend/)

  ### Typical / recommended
  commands:
    description: Command to run, generally oc commands; e.g. oc whoami
  cronjob:
    description: Cronjob to run, watch and report on

  ### Usually a bad idea / not recommended
  cronjob_tail:
    description: Number of cronjob log lines to tail; use -1 for all
    default: 0
  cronjob_timeout:
    description: Timeout for cronjob to run; e.g. 5m
    default: 5m
  diff_branch:
    description: Branch to diff against
    default: ${{ github.event.repository.default_branch }}
  oc_version:
    description: Override oc version, >= 4.0; e.g. 4.14
    default: ''
  repository:
    description: Optionally, specify a different repo to clone
    default: ${{ github.repository }}

outputs:
  triggered:
    description: Whether the action was triggered
    value: ${{ steps.diff.outputs.triggered }}

permissions: {}

env:
  oc_version_default: '4.14'

runs:
  using: composite
  steps:
    # Send triggers to diff action
    - id: diff
      uses: bcgov/action-diff-triggers@v0.2.0
      with:
        triggers: ${{ inputs.triggers }}
        diff_branch: ${{ inputs.diff_branch }}

    - id: oc_version
      run: |
        echo "OC_VERSION=${{ inputs.oc_version || env.oc_version_default }}" >> $GITHUB_ENV

    - if: steps.diff.outputs.triggered == 'true'
      env:
        OC: https://mirror.openshift.com/pub/openshift-v4/clients/ocp/stable-${{ env.OC_VERSION }}/openshift-client-linux.tar.gz
      shell: bash
      working-directory: /usr/local/bin/
      run: |
        # Install CLI tool (retry, resume)
        (wget ${{ env.OC }} -qcO - | tar -xzvf - oc)|| !!
        oc version
    
    - if: steps.diff.outputs.triggered == 'true'
      shell: bash
      run: |
          # OpenShift login
          oc login --server=${{ inputs.oc_server }} --token=$( curl -ksX POST \
            ${{ inputs.oc_server }}/api/v1/namespaces/${{ inputs.oc_namespace }}/serviceaccounts/pipeline/token \
            --header "Authorization: Bearer ${{ inputs.oc_token }}" \
            --header "Content-Type: application/json; charset=utf-8" \
            --data '{"spec": {"expirationSeconds": 600}}' \
            | jq -r '.status.token' \
          )
          
          # Verify namespace
          if [ "$( oc project -q )" != "${{ inputs.oc_namespace }}" ]; then
            echo "Project and token do not match!"
            exit 1
          fi

    - if: steps.diff.outputs.triggered == 'true'
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}

    - if: steps.diff.outputs.triggered == 'true' && inputs.commands
      shell: bash
      run: |
        # Run command(s)
        ${{ inputs.commands }}

    - if: steps.diff.outputs.triggered == 'true' && inputs.cronjob
      shell: bash
      run: |
        # Run Cronjob and report on completion
        JOB_NAME=${{ inputs.cronjob }}--$(date +"%Y-%m-%d--%H-%M-%S")
        echo "JOB_NAME=${JOB_NAME}" >> $GITHUB_ENV

        oc create job ${JOB_NAME} --from=cronjob/${{ inputs.cronjob }}
        oc wait --for jsonpath='{.status.phase}'=Succeeded pod --selector=job-name=${JOB_NAME} \
           --timeout=${{ inputs.cronjob_timeout }}
        echo "Job successful!"

    # Provide logs if requested, even on fail
    - if: always() && steps.diff.outputs.triggered == 'true' && inputs.cronjob
      shell: bash
      run: |
        if [ "${{ inputs.cronjob_logs }}" != "false" ]; then
          echo -e "\n\n--- Logs ---\n\n"
          oc logs --tail=${{ inputs.cronjob_tail }} --selector=job-name=${JOB_NAME}
          echo -e "\n\n---\n\n"
        fi

    # Action repo needs to be present for cleanup/tests
    - if: steps.diff.outputs.triggered == 'true' && github.repository != inputs.repository
      name: Checkout local repo to make sure action.yml is present
      uses: actions/checkout@v4
