name: OpenShift CLI (oc) Login and Runner
description: |
  Action for running OpenShift (oc) commands and managing cronjobs.
  Supports conditional execution based on file changes and provides detailed logging.
branding:
  icon: package
  color: blue

inputs:
  ### Required
  oc_namespace:
    description: |
      OpenShift namespace
      Example: abc123-dev, abc123-test, abc123-prod
    required: true
    pattern: '^[a-z0-9]{6}-(dev|test|prod|tools)$'
  oc_server:
    description: |
      OpenShift server URL with port
      Example: https://api.silver.devops.gov.bc.ca:6443
    required: true
    pattern: '^https:\/\/.*:6443$'
  oc_token:
    description: |
      OpenShift access token for authentication
      Should be stored as a GitHub secret
    required: true
    minLength: 32

  ### Typical / recommended
  commands:
    description: |
      Commands to run (generally oc commands)
      Example: oc whoami
  cronjob:
    description: |
      Name of the cronjob to execute and monitor
      Example: nr-repository-name-cronjob-component
  triggers:
    description: |
      Bash array to diff for triggering, omit to always run
      Example: ('./common', './backend/' './frontend/)

  ### Usually a bad idea / not recommended
  cronjob_tail:
    description: |
      Number of cronjob log lines to tail; use -1 for all
      Example: 100, 200, -1
    default: -1
    # pattern accepts -1 or any non-negative integer
    pattern: '^(-1|[0-9]+)$'
  diff_branch:
    description: |
      Branch to diff against
      Example: main, master, SHA or tag
    default: ${{ github.event.repository.default_branch }}
  oc_version:
    description: |
      Override oc version, >= 4.0
      Example: 4.16
    default: '4.14'
    pattern: '^(4\.[0-9]+|latest)$'
  repository:
    description: |
      Optionally, specify a different repo to clone
      Example: bcgov/openshift-quickstart
    default: ''
    pattern: '^[a-zA-Z0-9-_]+/[a-zA-Z0-9-_]+$'
  ref:
    # This should usually be empty unless we're overriding the current branch
    description: |
      The branch, tag or SHA to checkout; omit to use the current branch
      Example: main, master, SHA or tag
    default: ''
  timeout:
    description: |
      Timeout for commands or cronjob
      Example: 10m, 30s, 1h
    default: 10m
    pattern: '^[0-9]+[mhs]$'

outputs:
  job-name:
    description: Name of the job created from the cronjob param
    value: ${{ steps.cronjob.outputs.job-name }}
  triggered:
    description: Whether the action was triggered
    value: ${{ steps.diff.outputs.triggered }}

permissions: {}

runs:
  using: composite
  steps:
    # Send triggers to diff action
    - id: diff
      uses: bcgov/action-diff-triggers@0d193029efd26c76aeacaa84aba3328de8198370 # v0.2.0
      with:
        triggers: ${{ inputs.triggers }}
        diff_branch: ${{ inputs.diff_branch }}

    - if: steps.diff.outputs.triggered == 'true'
      env:
        OC: ${{ inputs.oc_version == 'latest' && 'latest' || format('stable-{0}', inputs.oc_version) }}
      shell: bash
      working-directory: /usr/local/bin
      run: |
        # Install CLI Tool and Login
        # Check if oc is already installed
        if ! command -v oc &>/dev/null; then
          URL="https://mirror.openshift.com/pub/openshift-v4/clients/ocp/${OC}/openshift-client-linux.tar.gz"
          echo "Downloading OpenShift CLI from ${URL}..."

          # Download the archive
          if ! wget "${URL}" -qO oc.tar.gz; then
            echo "Error: Failed to download OpenShift CLI"
            exit 1
          fi

          # Extract the oc binary
          if ! tar -xzf oc.tar.gz oc; then
            echo "Error: Failed to extract oc binary"
            rm -f oc.tar.gz
            exit 1
          fi
          rm -f oc.tar.gz
        fi

        # OpenShift login
        oc login --server=${{ inputs.oc_server }} --token=$( curl -ksX POST \
          ${{ inputs.oc_server }}/api/v1/namespaces/${{ inputs.oc_namespace }}/serviceaccounts/pipeline/token \
          --header "Authorization: Bearer ${{ inputs.oc_token }}" \
          --header "Content-Type: application/json; charset=utf-8" \
          --data '{"spec": {"expirationSeconds": 600}}' \
          | jq -r '.status.token' \
        ) || { echo "Failed to obtain service account token"; exit 1; }

        # Verify namespace
        if [ "$( oc project -q )" != "${{ inputs.oc_namespace }}" ]; then
          echo "Project and token do not match!"
          exit 1
        fi

        # Version for client, kustomize, server and Kubernetes
        echo -e "\nInput Version: ${{ env.OC }}"
        oc version
        echo

    - if: steps.diff.outputs.triggered == 'true'
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        ref: ${{ inputs.ref }}

    - if: steps.diff.outputs.triggered == 'true' && inputs.commands
      shell: bash
      run: |
        # Run command(s)
        ${{ inputs.commands }}

    - if: steps.diff.outputs.triggered == 'true' && inputs.commands && inputs.cronjob
      shell: bash
      run: sleep 3

    # Action repo needs to be present for triggered cronjob scripts or cleanup (using override repo)
    - if: steps.diff.outputs.triggered == 'true' || github.repository != inputs.repository
      name: Checkout local repo to make sure action.yml is present
      uses: actions/checkout@v4

    - if: steps.diff.outputs.triggered == 'true' && inputs.cronjob
      id: cronjob
      shell: bash
      run: |
        # Run the cronjob script
        ./scripts/run_cronjob.sh "${{ inputs.cronjob }}" "${{ inputs.timeout }}" "${{ inputs.cronjob_tail }}"
